/*
 * FICO® Score
 * <p>La API de FICO® Score determina la probabilidad de incumplimiento de un acreditado en los próximos doce meses. A mayor puntaje de score, menor es el riesgo.<br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2024-01/Logo-Swaggers.png' height='70' width='270'/></p><br/>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.creditbureau.connector.circulodecredito.api;

import org.mifos.creditbureau.connector.circulodecredito.ApiCallback;
import org.mifos.creditbureau.connector.circulodecredito.ApiClient;
import org.mifos.creditbureau.connector.circulodecredito.ApiException;
import org.mifos.creditbureau.connector.circulodecredito.ApiResponse;
import org.mifos.creditbureau.connector.circulodecredito.Configuration;
import org.mifos.creditbureau.connector.circulodecredito.Pair;
import org.mifos.creditbureau.connector.circulodecredito.ProgressRequestBody;
import org.mifos.creditbureau.connector.circulodecredito.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.mifos.creditbureau.connector.circulodecredito.model.Errores;
import org.mifos.creditbureau.connector.circulodecredito.model.RequestScoreFolio;
import org.mifos.creditbureau.connector.circulodecredito.model.ResponseScore;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScoreFolioApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScoreFolioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScoreFolioApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for folio
     * @param xSignature Firma generada con la llave privada (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param scoreFolio  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> METHOD NOT ALLOWED </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED MEDIA TYPE. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> TOO MANY REQUESTS </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> INTERNAL SERVER ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE UNAVAILABLE </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call folioCall(@javax.annotation.Nonnull String xSignature, @javax.annotation.Nonnull String xApiKey, @javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, @javax.annotation.Nonnull RequestScoreFolio scoreFolio, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scoreFolio;

        // create path and map variables
        String localVarPath = "/folio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xSignature != null) {
            localVarHeaderParams.put("x-signature", localVarApiClient.parameterToString(xSignature));
        }


        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }


        if (username != null) {
            localVarHeaderParams.put("username", localVarApiClient.parameterToString(username));
        }


        if (password != null) {
            localVarHeaderParams.put("password", localVarApiClient.parameterToString(password));
        }


        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call folioValidateBeforeCall(@javax.annotation.Nonnull String xSignature, @javax.annotation.Nonnull String xApiKey, @javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, @javax.annotation.Nonnull RequestScoreFolio scoreFolio, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSignature' is set
        if (xSignature == null) {
            throw new ApiException("Missing the required parameter 'xSignature' when calling folio(Async)");
        }

        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling folio(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling folio(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling folio(Async)");
        }

        // verify the required parameter 'scoreFolio' is set
        if (scoreFolio == null) {
            throw new ApiException("Missing the required parameter 'scoreFolio' when calling folio(Async)");
        }

        return folioCall(xSignature, xApiKey, username, password, scoreFolio, _callback);

    }

    /**
     * 
     * 
     * @param xSignature Firma generada con la llave privada (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param scoreFolio  (required)
     * @return ResponseScore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> METHOD NOT ALLOWED </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED MEDIA TYPE. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> TOO MANY REQUESTS </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> INTERNAL SERVER ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE UNAVAILABLE </td><td>  -  </td></tr>
     </table>
     */
    public ResponseScore folio(@javax.annotation.Nonnull String xSignature, @javax.annotation.Nonnull String xApiKey, @javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, @javax.annotation.Nonnull RequestScoreFolio scoreFolio) throws ApiException {
        ApiResponse<ResponseScore> localVarResp = folioWithHttpInfo(xSignature, xApiKey, username, password, scoreFolio);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xSignature Firma generada con la llave privada (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param scoreFolio  (required)
     * @return ApiResponse&lt;ResponseScore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> METHOD NOT ALLOWED </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED MEDIA TYPE. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> TOO MANY REQUESTS </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> INTERNAL SERVER ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE UNAVAILABLE </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseScore> folioWithHttpInfo(@javax.annotation.Nonnull String xSignature, @javax.annotation.Nonnull String xApiKey, @javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, @javax.annotation.Nonnull RequestScoreFolio scoreFolio) throws ApiException {
        okhttp3.Call localVarCall = folioValidateBeforeCall(xSignature, xApiKey, username, password, scoreFolio, null);
        Type localVarReturnType = new TypeToken<ResponseScore>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xSignature Firma generada con la llave privada (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param username Usuario de Círculo de Crédito (required)
     * @param password Contraseña de Círculo de Crédito (required)
     * @param scoreFolio  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> METHOD NOT ALLOWED </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED MEDIA TYPE. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> TOO MANY REQUESTS </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> INTERNAL SERVER ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE UNAVAILABLE </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call folioAsync(@javax.annotation.Nonnull String xSignature, @javax.annotation.Nonnull String xApiKey, @javax.annotation.Nonnull String username, @javax.annotation.Nonnull String password, @javax.annotation.Nonnull RequestScoreFolio scoreFolio, final ApiCallback<ResponseScore> _callback) throws ApiException {

        okhttp3.Call localVarCall = folioValidateBeforeCall(xSignature, xApiKey, username, password, scoreFolio, _callback);
        Type localVarReturnType = new TypeToken<ResponseScore>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
