/*
 * FICO® Score
 * <p>La API de FICO® Score determina la probabilidad de incumplimiento de un acreditado en los próximos doce meses. A mayor puntaje de score, menor es el riesgo.<br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2024-01/Logo-Swaggers.png' height='70' width='270'/></p><br/>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.creditbureau.connector.circulodecredito.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.mifos.creditbureau.connector.circulodecredito.model.CatalogoEstados;
import org.mifos.creditbureau.connector.circulodecredito.model.CatalogoTipoAsentamiento;
import org.mifos.creditbureau.connector.circulodecredito.model.CatalogoTipoDomicilio;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.creditbureau.connector.circulodecredito.JSON;

/**
 * Datos del domicilio de la persona a consultar
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-04T16:05:43.760511-04:00[America/New_York]", comments = "Generator version: 7.14.0")
public class Domicilio {
  public static final String SERIALIZED_NAME_DIRECCION = "direccion";
  @SerializedName(SERIALIZED_NAME_DIRECCION)
  @javax.annotation.Nonnull
  private String direccion;

  public static final String SERIALIZED_NAME_COLONIA_POBLACION = "coloniaPoblacion";
  @SerializedName(SERIALIZED_NAME_COLONIA_POBLACION)
  @javax.annotation.Nonnull
  private String coloniaPoblacion;

  public static final String SERIALIZED_NAME_DELEGACION_MUNICIPIO = "delegacionMunicipio";
  @SerializedName(SERIALIZED_NAME_DELEGACION_MUNICIPIO)
  @javax.annotation.Nonnull
  private String delegacionMunicipio;

  public static final String SERIALIZED_NAME_CIUDAD = "ciudad";
  @SerializedName(SERIALIZED_NAME_CIUDAD)
  @javax.annotation.Nonnull
  private String ciudad;

  public static final String SERIALIZED_NAME_ESTADO = "estado";
  @SerializedName(SERIALIZED_NAME_ESTADO)
  @javax.annotation.Nonnull
  private CatalogoEstados estado;

  public static final String SERIALIZED_NAME_C_P = "CP";
  @SerializedName(SERIALIZED_NAME_C_P)
  @javax.annotation.Nonnull
  private String CP;

  public static final String SERIALIZED_NAME_FECHA_RESIDENCIA = "fechaResidencia";
  @SerializedName(SERIALIZED_NAME_FECHA_RESIDENCIA)
  @javax.annotation.Nullable
  private String fechaResidencia;

  public static final String SERIALIZED_NAME_NUMERO_TELEFONO = "numeroTelefono";
  @SerializedName(SERIALIZED_NAME_NUMERO_TELEFONO)
  @javax.annotation.Nullable
  private String numeroTelefono;

  public static final String SERIALIZED_NAME_TIPO_DOMICILIO = "tipoDomicilio";
  @SerializedName(SERIALIZED_NAME_TIPO_DOMICILIO)
  @javax.annotation.Nullable
  private CatalogoTipoDomicilio tipoDomicilio;

  public static final String SERIALIZED_NAME_TIPO_ASENTAMIENTO = "tipoAsentamiento";
  @SerializedName(SERIALIZED_NAME_TIPO_ASENTAMIENTO)
  @javax.annotation.Nullable
  private CatalogoTipoAsentamiento tipoAsentamiento;

  public static final String SERIALIZED_NAME_FECHA_REGISTRO_DOMICILIO = "fechaRegistroDomicilio";
  @SerializedName(SERIALIZED_NAME_FECHA_REGISTRO_DOMICILIO)
  @javax.annotation.Nullable
  private String fechaRegistroDomicilio;

  public static final String SERIALIZED_NAME_TIPO_ALTA_DOMICILIO = "tipoAltaDomicilio";
  @SerializedName(SERIALIZED_NAME_TIPO_ALTA_DOMICILIO)
  @javax.annotation.Nullable
  private BigDecimal tipoAltaDomicilio;

  public static final String SERIALIZED_NAME_ID_DOMICILIO = "idDomicilio";
  @SerializedName(SERIALIZED_NAME_ID_DOMICILIO)
  @javax.annotation.Nullable
  private String idDomicilio;

  public Domicilio() {
  }

  public Domicilio direccion(@javax.annotation.Nonnull String direccion) {
    this.direccion = direccion;
    return this;
  }

  /**
   * Reportar el nombre de la calle, número exterior, número interior. Deben considerarse avenida,cerrada, manzana, lote, edificio,departamento etc. Debe contener por lo menos dos cadenas de caracteres para que el registro sea válido, de lo contrario el registro será rechazado.
   * @return direccion
   */
  @javax.annotation.Nonnull
  public String getDireccion() {
    return direccion;
  }

  public void setDireccion(@javax.annotation.Nonnull String direccion) {
    this.direccion = direccion;
  }


  public Domicilio coloniaPoblacion(@javax.annotation.Nonnull String coloniaPoblacion) {
    this.coloniaPoblacion = coloniaPoblacion;
    return this;
  }

  /**
   * Reportar la colonia a la cual pertenece la dirección contenida en el elemento dirección.
   * @return coloniaPoblacion
   */
  @javax.annotation.Nonnull
  public String getColoniaPoblacion() {
    return coloniaPoblacion;
  }

  public void setColoniaPoblacion(@javax.annotation.Nonnull String coloniaPoblacion) {
    this.coloniaPoblacion = coloniaPoblacion;
  }


  public Domicilio delegacionMunicipio(@javax.annotation.Nonnull String delegacionMunicipio) {
    this.delegacionMunicipio = delegacionMunicipio;
    return this;
  }

  /**
   * Reportar la delegación o municipio a la cual pertenece la dirección contenida en el elemento Dirección.
   * @return delegacionMunicipio
   */
  @javax.annotation.Nonnull
  public String getDelegacionMunicipio() {
    return delegacionMunicipio;
  }

  public void setDelegacionMunicipio(@javax.annotation.Nonnull String delegacionMunicipio) {
    this.delegacionMunicipio = delegacionMunicipio;
  }


  public Domicilio ciudad(@javax.annotation.Nonnull String ciudad) {
    this.ciudad = ciudad;
    return this;
  }

  /**
   * Reportar la ciudad a la cual pertenece la dirección contenida en el elemento Dirección.
   * @return ciudad
   */
  @javax.annotation.Nonnull
  public String getCiudad() {
    return ciudad;
  }

  public void setCiudad(@javax.annotation.Nonnull String ciudad) {
    this.ciudad = ciudad;
  }


  public Domicilio estado(@javax.annotation.Nonnull CatalogoEstados estado) {
    this.estado = estado;
    return this;
  }

  /**
   * Get estado
   * @return estado
   */
  @javax.annotation.Nonnull
  public CatalogoEstados getEstado() {
    return estado;
  }

  public void setEstado(@javax.annotation.Nonnull CatalogoEstados estado) {
    this.estado = estado;
  }


  public Domicilio CP(@javax.annotation.Nonnull String CP) {
    this.CP = CP;
    return this;
  }

  /**
   * El código postal reportado debe estar compuesto por 5 dígitos. Para que el código postal sea válido deberá corresponder al estado reportado.
   * @return CP
   */
  @javax.annotation.Nonnull
  public String getCP() {
    return CP;
  }

  public void setCP(@javax.annotation.Nonnull String CP) {
    this.CP = CP;
  }


  public Domicilio fechaResidencia(@javax.annotation.Nullable String fechaResidencia) {
    this.fechaResidencia = fechaResidencia;
    return this;
  }

  /**
   * Get fechaResidencia
   * @return fechaResidencia
   */
  @javax.annotation.Nullable
  public String getFechaResidencia() {
    return fechaResidencia;
  }

  public void setFechaResidencia(@javax.annotation.Nullable String fechaResidencia) {
    this.fechaResidencia = fechaResidencia;
  }


  public Domicilio numeroTelefono(@javax.annotation.Nullable String numeroTelefono) {
    this.numeroTelefono = numeroTelefono;
    return this;
  }

  /**
   * Get numeroTelefono
   * @return numeroTelefono
   */
  @javax.annotation.Nullable
  public String getNumeroTelefono() {
    return numeroTelefono;
  }

  public void setNumeroTelefono(@javax.annotation.Nullable String numeroTelefono) {
    this.numeroTelefono = numeroTelefono;
  }


  public Domicilio tipoDomicilio(@javax.annotation.Nullable CatalogoTipoDomicilio tipoDomicilio) {
    this.tipoDomicilio = tipoDomicilio;
    return this;
  }

  /**
   * Get tipoDomicilio
   * @return tipoDomicilio
   */
  @javax.annotation.Nullable
  public CatalogoTipoDomicilio getTipoDomicilio() {
    return tipoDomicilio;
  }

  public void setTipoDomicilio(@javax.annotation.Nullable CatalogoTipoDomicilio tipoDomicilio) {
    this.tipoDomicilio = tipoDomicilio;
  }


  public Domicilio tipoAsentamiento(@javax.annotation.Nullable CatalogoTipoAsentamiento tipoAsentamiento) {
    this.tipoAsentamiento = tipoAsentamiento;
    return this;
  }

  /**
   * Get tipoAsentamiento
   * @return tipoAsentamiento
   */
  @javax.annotation.Nullable
  public CatalogoTipoAsentamiento getTipoAsentamiento() {
    return tipoAsentamiento;
  }

  public void setTipoAsentamiento(@javax.annotation.Nullable CatalogoTipoAsentamiento tipoAsentamiento) {
    this.tipoAsentamiento = tipoAsentamiento;
  }


  public Domicilio fechaRegistroDomicilio(@javax.annotation.Nullable String fechaRegistroDomicilio) {
    this.fechaRegistroDomicilio = fechaRegistroDomicilio;
    return this;
  }

  /**
   * Fecha en la cual se registró el domicilio.
   * @return fechaRegistroDomicilio
   */
  @javax.annotation.Nullable
  public String getFechaRegistroDomicilio() {
    return fechaRegistroDomicilio;
  }

  public void setFechaRegistroDomicilio(@javax.annotation.Nullable String fechaRegistroDomicilio) {
    this.fechaRegistroDomicilio = fechaRegistroDomicilio;
  }


  public Domicilio tipoAltaDomicilio(@javax.annotation.Nullable BigDecimal tipoAltaDomicilio) {
    this.tipoAltaDomicilio = tipoAltaDomicilio;
    return this;
  }

  /**
   * Los valores posibles: 0 &#x3D; Alta de crédito 1 &#x3D; Consulta expediente
   * @return tipoAltaDomicilio
   */
  @javax.annotation.Nullable
  public BigDecimal getTipoAltaDomicilio() {
    return tipoAltaDomicilio;
  }

  public void setTipoAltaDomicilio(@javax.annotation.Nullable BigDecimal tipoAltaDomicilio) {
    this.tipoAltaDomicilio = tipoAltaDomicilio;
  }


  public Domicilio idDomicilio(@javax.annotation.Nullable String idDomicilio) {
    this.idDomicilio = idDomicilio;
    return this;
  }

  /**
   * Identificador único del domicilio
   * @return idDomicilio
   */
  @javax.annotation.Nullable
  public String getIdDomicilio() {
    return idDomicilio;
  }

  public void setIdDomicilio(@javax.annotation.Nullable String idDomicilio) {
    this.idDomicilio = idDomicilio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domicilio domicilio = (Domicilio) o;
    return Objects.equals(this.direccion, domicilio.direccion) &&
        Objects.equals(this.coloniaPoblacion, domicilio.coloniaPoblacion) &&
        Objects.equals(this.delegacionMunicipio, domicilio.delegacionMunicipio) &&
        Objects.equals(this.ciudad, domicilio.ciudad) &&
        Objects.equals(this.estado, domicilio.estado) &&
        Objects.equals(this.CP, domicilio.CP) &&
        Objects.equals(this.fechaResidencia, domicilio.fechaResidencia) &&
        Objects.equals(this.numeroTelefono, domicilio.numeroTelefono) &&
        Objects.equals(this.tipoDomicilio, domicilio.tipoDomicilio) &&
        Objects.equals(this.tipoAsentamiento, domicilio.tipoAsentamiento) &&
        Objects.equals(this.fechaRegistroDomicilio, domicilio.fechaRegistroDomicilio) &&
        Objects.equals(this.tipoAltaDomicilio, domicilio.tipoAltaDomicilio) &&
        Objects.equals(this.idDomicilio, domicilio.idDomicilio);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(direccion, coloniaPoblacion, delegacionMunicipio, ciudad, estado, CP, fechaResidencia, numeroTelefono, tipoDomicilio, tipoAsentamiento, fechaRegistroDomicilio, tipoAltaDomicilio, idDomicilio);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domicilio {\n");
    sb.append("    direccion: ").append(toIndentedString(direccion)).append("\n");
    sb.append("    coloniaPoblacion: ").append(toIndentedString(coloniaPoblacion)).append("\n");
    sb.append("    delegacionMunicipio: ").append(toIndentedString(delegacionMunicipio)).append("\n");
    sb.append("    ciudad: ").append(toIndentedString(ciudad)).append("\n");
    sb.append("    estado: ").append(toIndentedString(estado)).append("\n");
    sb.append("    CP: ").append(toIndentedString(CP)).append("\n");
    sb.append("    fechaResidencia: ").append(toIndentedString(fechaResidencia)).append("\n");
    sb.append("    numeroTelefono: ").append(toIndentedString(numeroTelefono)).append("\n");
    sb.append("    tipoDomicilio: ").append(toIndentedString(tipoDomicilio)).append("\n");
    sb.append("    tipoAsentamiento: ").append(toIndentedString(tipoAsentamiento)).append("\n");
    sb.append("    fechaRegistroDomicilio: ").append(toIndentedString(fechaRegistroDomicilio)).append("\n");
    sb.append("    tipoAltaDomicilio: ").append(toIndentedString(tipoAltaDomicilio)).append("\n");
    sb.append("    idDomicilio: ").append(toIndentedString(idDomicilio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("direccion", "coloniaPoblacion", "delegacionMunicipio", "ciudad", "estado", "CP", "fechaResidencia", "numeroTelefono", "tipoDomicilio", "tipoAsentamiento", "fechaRegistroDomicilio", "tipoAltaDomicilio", "idDomicilio"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("direccion", "coloniaPoblacion", "delegacionMunicipio", "ciudad", "estado", "CP"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Domicilio
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Domicilio.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Domicilio is not found in the empty JSON string", Domicilio.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Domicilio.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Domicilio` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Domicilio.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("direccion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direccion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direccion").toString()));
      }
      if (!jsonObj.get("coloniaPoblacion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coloniaPoblacion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coloniaPoblacion").toString()));
      }
      if (!jsonObj.get("delegacionMunicipio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegacionMunicipio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegacionMunicipio").toString()));
      }
      if (!jsonObj.get("ciudad").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciudad` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciudad").toString()));
      }
      // validate the required field `estado`
      CatalogoEstados.validateJsonElement(jsonObj.get("estado"));
      if (!jsonObj.get("CP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CP").toString()));
      }
      if ((jsonObj.get("fechaResidencia") != null && !jsonObj.get("fechaResidencia").isJsonNull()) && !jsonObj.get("fechaResidencia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fechaResidencia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fechaResidencia").toString()));
      }
      if ((jsonObj.get("numeroTelefono") != null && !jsonObj.get("numeroTelefono").isJsonNull()) && !jsonObj.get("numeroTelefono").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numeroTelefono` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numeroTelefono").toString()));
      }
      // validate the optional field `tipoDomicilio`
      if (jsonObj.get("tipoDomicilio") != null && !jsonObj.get("tipoDomicilio").isJsonNull()) {
        CatalogoTipoDomicilio.validateJsonElement(jsonObj.get("tipoDomicilio"));
      }
      // validate the optional field `tipoAsentamiento`
      if (jsonObj.get("tipoAsentamiento") != null && !jsonObj.get("tipoAsentamiento").isJsonNull()) {
        CatalogoTipoAsentamiento.validateJsonElement(jsonObj.get("tipoAsentamiento"));
      }
      if ((jsonObj.get("fechaRegistroDomicilio") != null && !jsonObj.get("fechaRegistroDomicilio").isJsonNull()) && !jsonObj.get("fechaRegistroDomicilio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fechaRegistroDomicilio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fechaRegistroDomicilio").toString()));
      }
      if ((jsonObj.get("idDomicilio") != null && !jsonObj.get("idDomicilio").isJsonNull()) && !jsonObj.get("idDomicilio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idDomicilio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idDomicilio").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Domicilio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Domicilio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Domicilio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Domicilio.class));

       return (TypeAdapter<T>) new TypeAdapter<Domicilio>() {
           @Override
           public void write(JsonWriter out, Domicilio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Domicilio read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Domicilio given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Domicilio
   * @throws IOException if the JSON string is invalid with respect to Domicilio
   */
  public static Domicilio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Domicilio.class);
  }

  /**
   * Convert an instance of Domicilio to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

