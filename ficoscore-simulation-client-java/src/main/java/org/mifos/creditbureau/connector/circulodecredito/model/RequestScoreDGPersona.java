/*
 * FICO® Score
 * <p>La API de FICO® Score determina la probabilidad de incumplimiento de un acreditado en los próximos doce meses. A mayor puntaje de score, menor es el riesgo.<br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2024-01/Logo-Swaggers.png' height='70' width='270'/></p><br/>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.creditbureau.connector.circulodecredito.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.mifos.creditbureau.connector.circulodecredito.model.Domicilio;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.creditbureau.connector.circulodecredito.JSON;

/**
 * RequestScoreDGPersona
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-04T16:05:43.760511-04:00[America/New_York]", comments = "Generator version: 7.14.0")
public class RequestScoreDGPersona {
  public static final String SERIALIZED_NAME_NOMBRES = "nombres";
  @SerializedName(SERIALIZED_NAME_NOMBRES)
  @javax.annotation.Nonnull
  private String nombres;

  public static final String SERIALIZED_NAME_SEGUNDO_NOMBRE = "segundoNombre";
  @SerializedName(SERIALIZED_NAME_SEGUNDO_NOMBRE)
  @javax.annotation.Nullable
  private String segundoNombre;

  public static final String SERIALIZED_NAME_APELLIDO_PATERNO = "apellidoPaterno";
  @SerializedName(SERIALIZED_NAME_APELLIDO_PATERNO)
  @javax.annotation.Nonnull
  private String apellidoPaterno;

  public static final String SERIALIZED_NAME_APELLIDO_MATERNO = "apellidoMaterno";
  @SerializedName(SERIALIZED_NAME_APELLIDO_MATERNO)
  @javax.annotation.Nonnull
  private String apellidoMaterno;

  public static final String SERIALIZED_NAME_APELLIDO_ADICIONAL = "apellidoAdicional";
  @SerializedName(SERIALIZED_NAME_APELLIDO_ADICIONAL)
  @javax.annotation.Nullable
  private String apellidoAdicional;

  public static final String SERIALIZED_NAME_FECHA_NACIMIENTO = "fechaNacimiento";
  @SerializedName(SERIALIZED_NAME_FECHA_NACIMIENTO)
  @javax.annotation.Nonnull
  private String fechaNacimiento;

  public static final String SERIALIZED_NAME_R_F_C = "RFC";
  @SerializedName(SERIALIZED_NAME_R_F_C)
  @javax.annotation.Nullable
  private String RFC;

  public static final String SERIALIZED_NAME_C_U_R_P = "CURP";
  @SerializedName(SERIALIZED_NAME_C_U_R_P)
  @javax.annotation.Nullable
  private String CURP;

  public static final String SERIALIZED_NAME_NACIONALIDAD = "nacionalidad";
  @SerializedName(SERIALIZED_NAME_NACIONALIDAD)
  @javax.annotation.Nullable
  private String nacionalidad;

  public static final String SERIALIZED_NAME_RESIDENCIA = "residencia";
  @SerializedName(SERIALIZED_NAME_RESIDENCIA)
  @javax.annotation.Nullable
  private String residencia;

  public static final String SERIALIZED_NAME_ESTADO_CIVIL = "estadoCivil";
  @SerializedName(SERIALIZED_NAME_ESTADO_CIVIL)
  @javax.annotation.Nullable
  private String estadoCivil;

  public static final String SERIALIZED_NAME_SEXO = "sexo";
  @SerializedName(SERIALIZED_NAME_SEXO)
  @javax.annotation.Nullable
  private String sexo;

  public static final String SERIALIZED_NAME_CLAVE_ELECTOR_I_F_E = "claveElectorIFE";
  @SerializedName(SERIALIZED_NAME_CLAVE_ELECTOR_I_F_E)
  @javax.annotation.Nullable
  private String claveElectorIFE;

  public static final String SERIALIZED_NAME_NUMERO_DEPENDIENTES = "numeroDependientes";
  @SerializedName(SERIALIZED_NAME_NUMERO_DEPENDIENTES)
  @javax.annotation.Nullable
  private String numeroDependientes;

  public static final String SERIALIZED_NAME_FECHA_DEFUNCION = "fechaDefuncion";
  @SerializedName(SERIALIZED_NAME_FECHA_DEFUNCION)
  @javax.annotation.Nullable
  private String fechaDefuncion;

  public static final String SERIALIZED_NAME_DOMICILIO = "domicilio";
  @SerializedName(SERIALIZED_NAME_DOMICILIO)
  @javax.annotation.Nonnull
  private Domicilio domicilio;

  public RequestScoreDGPersona() {
  }

  public RequestScoreDGPersona nombres(@javax.annotation.Nonnull String nombres) {
    this.nombres = nombres;
    return this;
  }

  /**
   * Get nombres
   * @return nombres
   */
  @javax.annotation.Nonnull
  public String getNombres() {
    return nombres;
  }

  public void setNombres(@javax.annotation.Nonnull String nombres) {
    this.nombres = nombres;
  }


  public RequestScoreDGPersona segundoNombre(@javax.annotation.Nullable String segundoNombre) {
    this.segundoNombre = segundoNombre;
    return this;
  }

  /**
   * Get segundoNombre
   * @return segundoNombre
   */
  @javax.annotation.Nullable
  public String getSegundoNombre() {
    return segundoNombre;
  }

  public void setSegundoNombre(@javax.annotation.Nullable String segundoNombre) {
    this.segundoNombre = segundoNombre;
  }


  public RequestScoreDGPersona apellidoPaterno(@javax.annotation.Nonnull String apellidoPaterno) {
    this.apellidoPaterno = apellidoPaterno;
    return this;
  }

  /**
   * Get apellidoPaterno
   * @return apellidoPaterno
   */
  @javax.annotation.Nonnull
  public String getApellidoPaterno() {
    return apellidoPaterno;
  }

  public void setApellidoPaterno(@javax.annotation.Nonnull String apellidoPaterno) {
    this.apellidoPaterno = apellidoPaterno;
  }


  public RequestScoreDGPersona apellidoMaterno(@javax.annotation.Nonnull String apellidoMaterno) {
    this.apellidoMaterno = apellidoMaterno;
    return this;
  }

  /**
   * Get apellidoMaterno
   * @return apellidoMaterno
   */
  @javax.annotation.Nonnull
  public String getApellidoMaterno() {
    return apellidoMaterno;
  }

  public void setApellidoMaterno(@javax.annotation.Nonnull String apellidoMaterno) {
    this.apellidoMaterno = apellidoMaterno;
  }


  public RequestScoreDGPersona apellidoAdicional(@javax.annotation.Nullable String apellidoAdicional) {
    this.apellidoAdicional = apellidoAdicional;
    return this;
  }

  /**
   * Get apellidoAdicional
   * @return apellidoAdicional
   */
  @javax.annotation.Nullable
  public String getApellidoAdicional() {
    return apellidoAdicional;
  }

  public void setApellidoAdicional(@javax.annotation.Nullable String apellidoAdicional) {
    this.apellidoAdicional = apellidoAdicional;
  }


  public RequestScoreDGPersona fechaNacimiento(@javax.annotation.Nonnull String fechaNacimiento) {
    this.fechaNacimiento = fechaNacimiento;
    return this;
  }

  /**
   * Get fechaNacimiento
   * @return fechaNacimiento
   */
  @javax.annotation.Nonnull
  public String getFechaNacimiento() {
    return fechaNacimiento;
  }

  public void setFechaNacimiento(@javax.annotation.Nonnull String fechaNacimiento) {
    this.fechaNacimiento = fechaNacimiento;
  }


  public RequestScoreDGPersona RFC(@javax.annotation.Nullable String RFC) {
    this.RFC = RFC;
    return this;
  }

  /**
   * Get RFC
   * @return RFC
   */
  @javax.annotation.Nullable
  public String getRFC() {
    return RFC;
  }

  public void setRFC(@javax.annotation.Nullable String RFC) {
    this.RFC = RFC;
  }


  public RequestScoreDGPersona CURP(@javax.annotation.Nullable String CURP) {
    this.CURP = CURP;
    return this;
  }

  /**
   * Get CURP
   * @return CURP
   */
  @javax.annotation.Nullable
  public String getCURP() {
    return CURP;
  }

  public void setCURP(@javax.annotation.Nullable String CURP) {
    this.CURP = CURP;
  }


  public RequestScoreDGPersona nacionalidad(@javax.annotation.Nullable String nacionalidad) {
    this.nacionalidad = nacionalidad;
    return this;
  }

  /**
   * Get nacionalidad
   * @return nacionalidad
   */
  @javax.annotation.Nullable
  public String getNacionalidad() {
    return nacionalidad;
  }

  public void setNacionalidad(@javax.annotation.Nullable String nacionalidad) {
    this.nacionalidad = nacionalidad;
  }


  public RequestScoreDGPersona residencia(@javax.annotation.Nullable String residencia) {
    this.residencia = residencia;
    return this;
  }

  /**
   * Get residencia
   * @return residencia
   */
  @javax.annotation.Nullable
  public String getResidencia() {
    return residencia;
  }

  public void setResidencia(@javax.annotation.Nullable String residencia) {
    this.residencia = residencia;
  }


  public RequestScoreDGPersona estadoCivil(@javax.annotation.Nullable String estadoCivil) {
    this.estadoCivil = estadoCivil;
    return this;
  }

  /**
   * Get estadoCivil
   * @return estadoCivil
   */
  @javax.annotation.Nullable
  public String getEstadoCivil() {
    return estadoCivil;
  }

  public void setEstadoCivil(@javax.annotation.Nullable String estadoCivil) {
    this.estadoCivil = estadoCivil;
  }


  public RequestScoreDGPersona sexo(@javax.annotation.Nullable String sexo) {
    this.sexo = sexo;
    return this;
  }

  /**
   * Get sexo
   * @return sexo
   */
  @javax.annotation.Nullable
  public String getSexo() {
    return sexo;
  }

  public void setSexo(@javax.annotation.Nullable String sexo) {
    this.sexo = sexo;
  }


  public RequestScoreDGPersona claveElectorIFE(@javax.annotation.Nullable String claveElectorIFE) {
    this.claveElectorIFE = claveElectorIFE;
    return this;
  }

  /**
   * Get claveElectorIFE
   * @return claveElectorIFE
   */
  @javax.annotation.Nullable
  public String getClaveElectorIFE() {
    return claveElectorIFE;
  }

  public void setClaveElectorIFE(@javax.annotation.Nullable String claveElectorIFE) {
    this.claveElectorIFE = claveElectorIFE;
  }


  public RequestScoreDGPersona numeroDependientes(@javax.annotation.Nullable String numeroDependientes) {
    this.numeroDependientes = numeroDependientes;
    return this;
  }

  /**
   * Get numeroDependientes
   * @return numeroDependientes
   */
  @javax.annotation.Nullable
  public String getNumeroDependientes() {
    return numeroDependientes;
  }

  public void setNumeroDependientes(@javax.annotation.Nullable String numeroDependientes) {
    this.numeroDependientes = numeroDependientes;
  }


  public RequestScoreDGPersona fechaDefuncion(@javax.annotation.Nullable String fechaDefuncion) {
    this.fechaDefuncion = fechaDefuncion;
    return this;
  }

  /**
   * Get fechaDefuncion
   * @return fechaDefuncion
   */
  @javax.annotation.Nullable
  public String getFechaDefuncion() {
    return fechaDefuncion;
  }

  public void setFechaDefuncion(@javax.annotation.Nullable String fechaDefuncion) {
    this.fechaDefuncion = fechaDefuncion;
  }


  public RequestScoreDGPersona domicilio(@javax.annotation.Nonnull Domicilio domicilio) {
    this.domicilio = domicilio;
    return this;
  }

  /**
   * Get domicilio
   * @return domicilio
   */
  @javax.annotation.Nonnull
  public Domicilio getDomicilio() {
    return domicilio;
  }

  public void setDomicilio(@javax.annotation.Nonnull Domicilio domicilio) {
    this.domicilio = domicilio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestScoreDGPersona requestScoreDGPersona = (RequestScoreDGPersona) o;
    return Objects.equals(this.nombres, requestScoreDGPersona.nombres) &&
        Objects.equals(this.segundoNombre, requestScoreDGPersona.segundoNombre) &&
        Objects.equals(this.apellidoPaterno, requestScoreDGPersona.apellidoPaterno) &&
        Objects.equals(this.apellidoMaterno, requestScoreDGPersona.apellidoMaterno) &&
        Objects.equals(this.apellidoAdicional, requestScoreDGPersona.apellidoAdicional) &&
        Objects.equals(this.fechaNacimiento, requestScoreDGPersona.fechaNacimiento) &&
        Objects.equals(this.RFC, requestScoreDGPersona.RFC) &&
        Objects.equals(this.CURP, requestScoreDGPersona.CURP) &&
        Objects.equals(this.nacionalidad, requestScoreDGPersona.nacionalidad) &&
        Objects.equals(this.residencia, requestScoreDGPersona.residencia) &&
        Objects.equals(this.estadoCivil, requestScoreDGPersona.estadoCivil) &&
        Objects.equals(this.sexo, requestScoreDGPersona.sexo) &&
        Objects.equals(this.claveElectorIFE, requestScoreDGPersona.claveElectorIFE) &&
        Objects.equals(this.numeroDependientes, requestScoreDGPersona.numeroDependientes) &&
        Objects.equals(this.fechaDefuncion, requestScoreDGPersona.fechaDefuncion) &&
        Objects.equals(this.domicilio, requestScoreDGPersona.domicilio);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(nombres, segundoNombre, apellidoPaterno, apellidoMaterno, apellidoAdicional, fechaNacimiento, RFC, CURP, nacionalidad, residencia, estadoCivil, sexo, claveElectorIFE, numeroDependientes, fechaDefuncion, domicilio);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestScoreDGPersona {\n");
    sb.append("    nombres: ").append(toIndentedString(nombres)).append("\n");
    sb.append("    segundoNombre: ").append(toIndentedString(segundoNombre)).append("\n");
    sb.append("    apellidoPaterno: ").append(toIndentedString(apellidoPaterno)).append("\n");
    sb.append("    apellidoMaterno: ").append(toIndentedString(apellidoMaterno)).append("\n");
    sb.append("    apellidoAdicional: ").append(toIndentedString(apellidoAdicional)).append("\n");
    sb.append("    fechaNacimiento: ").append(toIndentedString(fechaNacimiento)).append("\n");
    sb.append("    RFC: ").append(toIndentedString(RFC)).append("\n");
    sb.append("    CURP: ").append(toIndentedString(CURP)).append("\n");
    sb.append("    nacionalidad: ").append(toIndentedString(nacionalidad)).append("\n");
    sb.append("    residencia: ").append(toIndentedString(residencia)).append("\n");
    sb.append("    estadoCivil: ").append(toIndentedString(estadoCivil)).append("\n");
    sb.append("    sexo: ").append(toIndentedString(sexo)).append("\n");
    sb.append("    claveElectorIFE: ").append(toIndentedString(claveElectorIFE)).append("\n");
    sb.append("    numeroDependientes: ").append(toIndentedString(numeroDependientes)).append("\n");
    sb.append("    fechaDefuncion: ").append(toIndentedString(fechaDefuncion)).append("\n");
    sb.append("    domicilio: ").append(toIndentedString(domicilio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("nombres", "segundoNombre", "apellidoPaterno", "apellidoMaterno", "apellidoAdicional", "fechaNacimiento", "RFC", "CURP", "nacionalidad", "residencia", "estadoCivil", "sexo", "claveElectorIFE", "numeroDependientes", "fechaDefuncion", "domicilio"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("nombres", "apellidoPaterno", "apellidoMaterno", "fechaNacimiento", "domicilio"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestScoreDGPersona
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestScoreDGPersona.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestScoreDGPersona is not found in the empty JSON string", RequestScoreDGPersona.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestScoreDGPersona.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestScoreDGPersona` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestScoreDGPersona.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("nombres").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nombres` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nombres").toString()));
      }
      if ((jsonObj.get("segundoNombre") != null && !jsonObj.get("segundoNombre").isJsonNull()) && !jsonObj.get("segundoNombre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segundoNombre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segundoNombre").toString()));
      }
      if (!jsonObj.get("apellidoPaterno").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apellidoPaterno` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apellidoPaterno").toString()));
      }
      if (!jsonObj.get("apellidoMaterno").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apellidoMaterno` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apellidoMaterno").toString()));
      }
      if ((jsonObj.get("apellidoAdicional") != null && !jsonObj.get("apellidoAdicional").isJsonNull()) && !jsonObj.get("apellidoAdicional").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apellidoAdicional` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apellidoAdicional").toString()));
      }
      if (!jsonObj.get("fechaNacimiento").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fechaNacimiento` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fechaNacimiento").toString()));
      }
      if ((jsonObj.get("RFC") != null && !jsonObj.get("RFC").isJsonNull()) && !jsonObj.get("RFC").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RFC` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RFC").toString()));
      }
      if ((jsonObj.get("CURP") != null && !jsonObj.get("CURP").isJsonNull()) && !jsonObj.get("CURP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CURP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CURP").toString()));
      }
      if ((jsonObj.get("nacionalidad") != null && !jsonObj.get("nacionalidad").isJsonNull()) && !jsonObj.get("nacionalidad").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nacionalidad` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nacionalidad").toString()));
      }
      if ((jsonObj.get("residencia") != null && !jsonObj.get("residencia").isJsonNull()) && !jsonObj.get("residencia").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `residencia` to be a primitive type in the JSON string but got `%s`", jsonObj.get("residencia").toString()));
      }
      if ((jsonObj.get("estadoCivil") != null && !jsonObj.get("estadoCivil").isJsonNull()) && !jsonObj.get("estadoCivil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estadoCivil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estadoCivil").toString()));
      }
      if ((jsonObj.get("sexo") != null && !jsonObj.get("sexo").isJsonNull()) && !jsonObj.get("sexo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sexo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sexo").toString()));
      }
      if ((jsonObj.get("claveElectorIFE") != null && !jsonObj.get("claveElectorIFE").isJsonNull()) && !jsonObj.get("claveElectorIFE").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claveElectorIFE` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claveElectorIFE").toString()));
      }
      if ((jsonObj.get("numeroDependientes") != null && !jsonObj.get("numeroDependientes").isJsonNull()) && !jsonObj.get("numeroDependientes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numeroDependientes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numeroDependientes").toString()));
      }
      if ((jsonObj.get("fechaDefuncion") != null && !jsonObj.get("fechaDefuncion").isJsonNull()) && !jsonObj.get("fechaDefuncion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fechaDefuncion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fechaDefuncion").toString()));
      }
      // validate the required field `domicilio`
      Domicilio.validateJsonElement(jsonObj.get("domicilio"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestScoreDGPersona.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestScoreDGPersona' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestScoreDGPersona> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestScoreDGPersona.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestScoreDGPersona>() {
           @Override
           public void write(JsonWriter out, RequestScoreDGPersona value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestScoreDGPersona read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestScoreDGPersona given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestScoreDGPersona
   * @throws IOException if the JSON string is invalid with respect to RequestScoreDGPersona
   */
  public static RequestScoreDGPersona fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestScoreDGPersona.class);
  }

  /**
   * Convert an instance of RequestScoreDGPersona to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

