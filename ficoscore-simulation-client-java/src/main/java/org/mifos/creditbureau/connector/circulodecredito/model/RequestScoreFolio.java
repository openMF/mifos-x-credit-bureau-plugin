/*
 * FICO® Score
 * <p>La API de FICO® Score determina la probabilidad de incumplimiento de un acreditado en los próximos doce meses. A mayor puntaje de score, menor es el riesgo.<br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2024-01/Logo-Swaggers.png' height='70' width='270'/></p><br/>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.creditbureau.connector.circulodecredito.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.creditbureau.connector.circulodecredito.JSON;

/**
 * Cuerpo de la petición para obtener respuesta del servicio
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-04T16:05:43.760511-04:00[America/New_York]", comments = "Generator version: 7.14.0")
public class RequestScoreFolio {
  public static final String SERIALIZED_NAME_FOLIO_CONSULTA = "folioConsulta";
  @SerializedName(SERIALIZED_NAME_FOLIO_CONSULTA)
  @javax.annotation.Nonnull
  private String folioConsulta;

  public static final String SERIALIZED_NAME_FOLIO_OTORGANTE = "folioOtorgante";
  @SerializedName(SERIALIZED_NAME_FOLIO_OTORGANTE)
  @javax.annotation.Nonnull
  private String folioOtorgante;

  public RequestScoreFolio() {
  }

  public RequestScoreFolio folioConsulta(@javax.annotation.Nonnull String folioConsulta) {
    this.folioConsulta = folioConsulta;
    return this;
  }

  /**
   * Get folioConsulta
   * @return folioConsulta
   */
  @javax.annotation.Nonnull
  public String getFolioConsulta() {
    return folioConsulta;
  }

  public void setFolioConsulta(@javax.annotation.Nonnull String folioConsulta) {
    this.folioConsulta = folioConsulta;
  }


  public RequestScoreFolio folioOtorgante(@javax.annotation.Nonnull String folioOtorgante) {
    this.folioOtorgante = folioOtorgante;
    return this;
  }

  /**
   * Get folioOtorgante
   * @return folioOtorgante
   */
  @javax.annotation.Nonnull
  public String getFolioOtorgante() {
    return folioOtorgante;
  }

  public void setFolioOtorgante(@javax.annotation.Nonnull String folioOtorgante) {
    this.folioOtorgante = folioOtorgante;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestScoreFolio requestScoreFolio = (RequestScoreFolio) o;
    return Objects.equals(this.folioConsulta, requestScoreFolio.folioConsulta) &&
        Objects.equals(this.folioOtorgante, requestScoreFolio.folioOtorgante);
  }

  @Override
  public int hashCode() {
    return Objects.hash(folioConsulta, folioOtorgante);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestScoreFolio {\n");
    sb.append("    folioConsulta: ").append(toIndentedString(folioConsulta)).append("\n");
    sb.append("    folioOtorgante: ").append(toIndentedString(folioOtorgante)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("folioConsulta", "folioOtorgante"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("folioConsulta", "folioOtorgante"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestScoreFolio
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestScoreFolio.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestScoreFolio is not found in the empty JSON string", RequestScoreFolio.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestScoreFolio.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestScoreFolio` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestScoreFolio.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("folioConsulta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folioConsulta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folioConsulta").toString()));
      }
      if (!jsonObj.get("folioOtorgante").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folioOtorgante` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folioOtorgante").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestScoreFolio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestScoreFolio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestScoreFolio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestScoreFolio.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestScoreFolio>() {
           @Override
           public void write(JsonWriter out, RequestScoreFolio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestScoreFolio read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestScoreFolio given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestScoreFolio
   * @throws IOException if the JSON string is invalid with respect to RequestScoreFolio
   */
  public static RequestScoreFolio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestScoreFolio.class);
  }

  /**
   * Convert an instance of RequestScoreFolio to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

