/*
 * FICO® Score
 * <p>La API de FICO® Score determina la probabilidad de incumplimiento de un acreditado en los próximos doce meses. A mayor puntaje de score, menor es el riesgo.<br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2024-01/Logo-Swaggers.png' height='70' width='270'/></p><br/>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.mifos.creditbureau.connector.circulodecredito.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.mifos.creditbureau.connector.circulodecredito.model.ResponseScoreScore;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.mifos.creditbureau.connector.circulodecredito.JSON;

/**
 * Si existen información se entregara en esta estructura de datos.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-04T16:05:43.760511-04:00[America/New_York]", comments = "Generator version: 7.14.0")
public class ResponseScore {
  public static final String SERIALIZED_NAME_FOLIO = "folio";
  @SerializedName(SERIALIZED_NAME_FOLIO)
  @javax.annotation.Nullable
  private String folio;

  public static final String SERIALIZED_NAME_FOLIO_CONSULTA = "folioConsulta";
  @SerializedName(SERIALIZED_NAME_FOLIO_CONSULTA)
  @javax.annotation.Nullable
  private String folioConsulta;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  @javax.annotation.Nullable
  private ResponseScoreScore score;

  public ResponseScore() {
  }

  public ResponseScore folio(@javax.annotation.Nullable String folio) {
    this.folio = folio;
    return this;
  }

  /**
   * Get folio
   * @return folio
   */
  @javax.annotation.Nullable
  public String getFolio() {
    return folio;
  }

  public void setFolio(@javax.annotation.Nullable String folio) {
    this.folio = folio;
  }


  public ResponseScore folioConsulta(@javax.annotation.Nullable String folioConsulta) {
    this.folioConsulta = folioConsulta;
    return this;
  }

  /**
   * Get folioConsulta
   * @return folioConsulta
   */
  @javax.annotation.Nullable
  public String getFolioConsulta() {
    return folioConsulta;
  }

  public void setFolioConsulta(@javax.annotation.Nullable String folioConsulta) {
    this.folioConsulta = folioConsulta;
  }


  public ResponseScore score(@javax.annotation.Nullable ResponseScoreScore score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public ResponseScoreScore getScore() {
    return score;
  }

  public void setScore(@javax.annotation.Nullable ResponseScoreScore score) {
    this.score = score;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseScore responseScore = (ResponseScore) o;
    return Objects.equals(this.folio, responseScore.folio) &&
        Objects.equals(this.folioConsulta, responseScore.folioConsulta) &&
        Objects.equals(this.score, responseScore.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(folio, folioConsulta, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseScore {\n");
    sb.append("    folio: ").append(toIndentedString(folio)).append("\n");
    sb.append("    folioConsulta: ").append(toIndentedString(folioConsulta)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("folio", "folioConsulta", "score"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseScore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseScore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseScore is not found in the empty JSON string", ResponseScore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseScore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseScore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("folio") != null && !jsonObj.get("folio").isJsonNull()) && !jsonObj.get("folio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folio").toString()));
      }
      if ((jsonObj.get("folioConsulta") != null && !jsonObj.get("folioConsulta").isJsonNull()) && !jsonObj.get("folioConsulta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folioConsulta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folioConsulta").toString()));
      }
      // validate the optional field `score`
      if (jsonObj.get("score") != null && !jsonObj.get("score").isJsonNull()) {
        ResponseScoreScore.validateJsonElement(jsonObj.get("score"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseScore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseScore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseScore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseScore.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseScore>() {
           @Override
           public void write(JsonWriter out, ResponseScore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseScore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseScore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseScore
   * @throws IOException if the JSON string is invalid with respect to ResponseScore
   */
  public static ResponseScore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseScore.class);
  }

  /**
   * Convert an instance of ResponseScore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

